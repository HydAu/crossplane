# CodeRabbit Configuration for Crossplane
# This configuration is optimized for the Crossplane Go project

# =============================================================================
# GLOBAL SETTINGS
# =============================================================================

# Language for CodeRabbit reviews and comments
language: "en-US"

# Instructions for CodeRabbit's tone and style in reviews
tone_instructions: |
  Adopt the tone and style of Crossplane maintainers: Be collaborative and 
  supportive (use phrases like 'this looks good to me', 'thanks for this 
  contribution!', 'awesome work'). Ask clarifying questions to understand the 
  approach rather than making assumptions ('what do you think about...?', 
  'is there a way to...?', 'can you help me understand...'). Focus on the 'why' 
  behind decisions and architectural implications. Be specific about concerns 
  but frame them constructively. Acknowledge good work and thank contributors. 
  Keep feedback concise but thorough.

# Disable early-access features for stability
early_access: false

# =============================================================================
# REVIEWS
# =============================================================================

reviews:
  # Use assertive profile to catch Crossplane-specific patterns that linters miss
  profile: "assertive"
  
  # Don't generate summary in PR description - let authors write their own
  high_level_summary: false
  
  # Include the high-level summary in the walkthrough comment instead
  high_level_summary_in_walkthrough: true
  
  # Placeholder text (unused since high_level_summary is false)
  high_level_summary_placeholder: "@coderabbitai summary"
  
  # Post review status comments on each review
  review_status: true
  
  # Set GitHub commit status (✅/⚪/❌) to show CodeRabbit review progress in PR checks
  commit_status: true
  
  # Keep walkthrough comment expanded (false = expanded, true = collapsed)
  collapse_walkthrough: false
  
  # Include a summary of which files were changed and how in the walkthrough
  changed_files_summary: true
  
  # Generate sequence diagrams to visualize code flow in the walkthrough
  sequence_diagrams: true
  
  # Estimate and display the code review effort/complexity
  estimate_code_review_effort: true
  
  # Analyze how well the PR addresses any linked GitHub issues
  assess_linked_issues: true
  
  # Include potentially related issues in the walkthrough
  related_issues: true
  
  # Include potentially related PRs in the walkthrough
  related_prs: true
  
  # Suggest appropriate labels based on the changes
  suggested_labels: true
  
  # Automatically apply suggested labels (disabled - let maintainers control)
  auto_apply_labels: false
  
  # Suggest reviewers based on code ownership and expertise
  suggested_reviewers: true
  
  # Automatically assign suggested reviewers (disabled - let maintainers control)
  auto_assign_reviewers: false
  
  # Disable poem generation in walkthrough comments
  poem: false
  
  # Focus reviews on source code, exclude generated and vendor files
  path_filters:
    # Include source code
    - "**/*.go"
    - "**/*.yaml"
    - "**/*.yml"
    - "**/*.md"
    - "**/*.proto"
    - "**/Dockerfile*"
    - "**/Earthfile"
    - "**/*.sh"
    
    # Exclude generated and vendor files
    - "!**/zz_generated*.go"
    - "!**/vendor/**"
    - "!**/node_modules/**"
    - "!**/*.pb.go"
    - "!**/*.pb.gw.go"
    - "!**/mock_*.go"
    - "!**/fake/**"
    - "!**/testdata/**"
    - "!**/dist/**"
    - "!**/build/**"
    - "!**/.tmp-earthly-out/**"
  
  # Path-specific instructions for different areas of the codebase
  path_instructions:
    - path: "**/*.go"
      instructions: |
        Enforce Crossplane-specific patterns: Use crossplane-runtime/pkg/errors
        for wrapping. Check variable naming (short for local scope, descriptive
        for wider scope). Ensure 'return early' pattern. Verify error scoping
        (declare in conditionals when possible). For nolint directives, require
        specific linter names and explanations. CRITICAL: Ensure all error
        messages are meaningful to end users, not just developers - avoid
        technical jargon, include context about what the user was trying to do,
        and suggest next steps when possible.
    
    - path: "**/*_test.go"
      instructions: |
        Enforce table-driven test structure: PascalCase test names (no
        underscores), args/want pattern, use cmp.Diff with
        cmpopts.EquateErrors() for error testing. Check for proper test case
        naming and reason fields. Ensure no third-party test frameworks (no
        Ginkgo, Gomega, Testify).
    
    - path: "**/*.md"
      instructions: |
        Ensure Markdown files are wrapped at 80 columns for consistency and
        readability. Lines can be longer if it makes links more readable, but
        otherwise should wrap at 80 characters. Check for proper heading
        structure, clear language, and that documentation is helpful for users.
    
    - path: "**/apis/**"
      instructions: |
        Focus on API design following Kubernetes API conventions from
        https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md.
        Check for proper field naming (camelCase), appropriate types, validation
        tags, and documentation. Ask about backward compatibility and the impact
        on existing users and upgrade paths. Consider if changes need feature
        gates or alpha/beta graduation. Ensure error messages in validation are
        user-friendly. Pay attention to API consistency, proper use of optional
        vs required fields, and following established Kubernetes patterns.
    
    - path: "**/internal/controller/**"
      instructions: |
        Review controller logic for proper reconciliation patterns, error
        handling, and resource management. Pay special attention to conditions
        and events: Conditions must be actionable for users (not developers),
        stable/deterministic, with proper Type/Reason/Message format. Events
        only when something actually happens, with specific details about what
        changed. No transient errors in conditions/events. All error messages
        must be meaningful to end users - include context about what
        resource/operation failed and why.
    
    - path: "**/cmd/**"
      instructions: |
        Review CLI commands for proper flag handling, help text, and error
        messages. Ensure commands follow Crossplane CLI conventions. Ask about
        backward compatibility and user experience. CLI error messages must be
        especially user-friendly - avoid internal error details, provide
        actionable guidance.
    
    - path: "**/test/**"
      instructions: |
        Focus on test coverage, test clarity, and proper use of testing
        utilities. Ask about testing scenarios and edge cases. Ensure tests are
        maintainable and cover the happy path and error conditions. Verify
        error testing uses proper patterns (cmpopts.EquateErrors, sentinel
        errors for complex cases).
    
    - path: "**/test/e2e/**"
      instructions: |
        Review E2E tests for proper structure following Crossplane patterns:
        Use features.NewWithDescription() with CamelCase names, not sentences.
        Ensure proper Setup/Assess/Teardown phases with descriptive names.
        Check that tests have appropriate labels (area, size, test suite).
        Verify tests use YAML manifests in test/e2e/manifests/<area>/<test>
        structure. Ensure tests avoid complex logic in e2e package and use
        funcs package for reusable logic. Check that tests don't assume
        ordering and can run independently. Verify proper cleanup in teardown
        phases.
    
    - path: "**/cluster/**"
      instructions: |
        Review Kubernetes manifests for security, resource limits, and proper
        RBAC. Ensure Helm chart follows best practices. Consider upgrade and
        rollback scenarios.
    
    - path: "**/design/**"
      instructions: |
        Focus on architectural decisions, user experience, and long-term
        maintainability. Ask clarifying questions about design choices and
        consider alternative approaches. Ensure the design aligns with
        Crossplane's principles and provides good user experience.
  
  # Automatic review settings
  auto_review:
    # Enable automatic code reviews on PR creation and updates
    enabled: true
    
    # Enable incremental reviews on each push to the PR
    auto_incremental_review: true
    
    # Skip reviewing draft PRs until they're ready for review
    drafts: false
    
    # Skip reviews if PR title contains these keywords (case-insensitive)
    ignore_title_keywords:
      - "wip"
      - "draft"
      - "do not merge"
      - "dnm"
    
    # Skip reviews from these automated bot accounts
    ignore_usernames:
      - "dependabot[bot]"
      - "renovate[bot]"
      - "github-actions[bot]"
  
  # Quality gates that run during CodeRabbit's review to check PR readiness
  pre_merge_checks:
    # Check PR title for length and descriptiveness
    title:
      mode: "warning"
      requirements: "Keep under 72 characters and be descriptive about what the change does."
    
    # Check that PR has a meaningful description
    description:
      mode: "warning"
    
    # Assess how well the PR addresses any linked GitHub issues
    issue_assessment:
      mode: "warning"
    
    # Check that exported functions and types have proper documentation
    docstrings:
      mode: "warning"
      threshold: 80
    
    # Custom checks specific to Crossplane development practices
    custom_checks:
      - name: "Breaking Changes"
        mode: "warning"
        instructions: "Check if this change introduces any breaking changes to APIs, CLI commands, or behavior. If so, ensure proper deprecation notices and migration guides are provided."
      
      - name: "Feature Gate Consideration"
        mode: "warning"
        instructions: "For new features, consider if they should be behind a feature gate, especially if they're experimental or could impact stability."
      
      - name: "Documentation Updates"
        mode: "warning"
        instructions: "Ensure that user-facing changes include appropriate documentation updates or clearly indicate what documentation needs to be updated."
  
  # Disable automatic code generation features
  finishing_touches:
    # Disable automatic docstring generation
    docstrings:
      enabled: false

    # Disable automatic unit test generation  
    unit_tests:
      enabled: false

  # Tools - DISABLED: We prefer to run linting tools directly in CI
  # Our comprehensive golangci-lint setup with "default: all" already covers
  # most static analysis. Additional tools can be added to CI as needed.
  tools:
    # Go linting - disabled (we run golangci-lint with comprehensive config)
    golangci-lint:
      enabled: false
    
    # Security and vulnerability scanning - disabled (prefer direct CI integration)
    gitleaks:
      enabled: false
    
    semgrep:
      enabled: false
    
    osvScanner:
      enabled: false
    
    # File format linting - disabled (prefer direct CI integration)
    yamllint:
      enabled: false
    
    markdownlint:
      enabled: false
    
    shellcheck:
      enabled: false
    
    hadolint:
      enabled: false
    
    actionlint:
      enabled: false
    
    buf:
      enabled: false
    
    # GitHub integration - disabled for now
    github-checks:
      enabled: false

# =============================================================================
# CHAT
# Interactive chat with CodeRabbit in PR comments. You can ask questions like:
# - @coderabbitai explain this error handling approach
# - @coderabbitai what are the edge cases for this function?
# - @coderabbitai how does this affect backward compatibility?
# - @coderabbitai generate unit tests for this function
# =============================================================================

chat:
  # Reply to questions automatically without requiring @coderabbitai mention
  auto_reply: true
  
  # Disable ASCII/emoji art in responses
  art: false

# =============================================================================
# KNOWLEDGE BASE
# =============================================================================

knowledge_base:
  # Enable knowledge base features (learning from codebase patterns)
  opt_out: false
  
  # Enable web search for additional context during reviews
  web_search:
    enabled: true
  
  # Learn from Crossplane's coding guidelines and apply them during reviews
  code_guidelines:
    enabled: true
    filePatterns:
      - "**/contributing/README.md"
  
  # Use repository-specific learnings for public repos, org-wide for private
  learnings:
    scope: "auto"
  
  # Use repository-specific issues for public repos, org-wide for private
  issues:
    scope: "auto"
  
  # Use repository-specific PRs for public repos, org-wide for private
  pull_requests:
    scope: "auto"
  
  # Enable MCP integration to provide context about external libraries and APIs
  mcp:
    usage: "enabled"
    disabled_servers: []
